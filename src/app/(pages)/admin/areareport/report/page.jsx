"use client";
import axios from "axios";
import React, { useState, useEffect } from "react";
import TopBar_Admin from "@components/Topbar_Admin";
import { useRouter } from "next/navigation";
import { v4 as uuidv4 } from 'uuid';

const FinancialReport = () => {
  const [data, setData] = useState([]);
  const [selectedRows, setSelectedRows] = useState({});
  const [modalData, setModalData] = useState(null);
  const [mergedData, setmergedData] = useState()
  const [combinedData, setcombinedData] = useState() // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Popup
  const router = useRouter();

  useEffect(() => {
    const fetchData = async () => {
      try {
        // ‚úÖ ‡∏î‡∏∂‡∏á token ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        const storedToken = localStorage.getItem("token");
        const tokenObject = storedToken ? JSON.parse(storedToken) : null;
        const token = tokenObject?.token || "";

        if (!token) {
          alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
          router.push("/login");
          return;
        }

        const headers = { Authorization: `Bearer ${token}` };
        console.log("üîπ Headers:", headers);

        // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const [salesRes, refundRes, historyRes, ownersRes] = await Promise.all([
          axios.get("http://localhost:5009/api/confirm", { headers }),
          axios.get("http://localhost:5002/api/bookings", { headers }),
          axios.get("http://localhost:4003/api/history", { headers }),
          axios.get("http://localhost:5011/api/users", { headers }), // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° API /owners
        ]);
        console.log("üîπ History Data:", historyRes.data);
        console.log("üîπ Owners Data:", ownersRes.data); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• owners ‡πÉ‡∏ô console
        const ownersMap = ownersRes.data.reduce((acc, owner) => {
          acc[owner._id] = owner;
          return acc;
        }, {});

        // ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• history ‡∏Å‡∏±‡∏ö owner
        const mergedData = historyRes.data.map(item => ({
          ...item,
          ownerInfo: ownersMap[item.owner._id] || null // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö owner ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null
        }));
        setmergedData(mergedData)
        console.log(mergedData);
        const today = new Date().toISOString().split("T")[0];

        const salesMap = salesRes.data.reduce((acc, item) => {
          if (item.location && item.price) {
            if (!acc[item.location]) {
              acc[item.location] = {
                location: item.location,
                day: today,
                price: 0,
                refunded: 0,
                deduction: 0,
                payout: 0
              };
            }
            acc[item.location].price += Number(item.price);
          }
          return acc;
        }, {});

        refundRes.data
          .filter((refund) => refund.status === "refunded" && refund.price)
          .forEach((refund) => {
            if (!salesMap[refund.location]) {
              salesMap[refund.location] = {
                location: refund.location,
                day: today,
                price: 0,
                refunded: 0,
                deduction: 0,
                payout: 0
              };
            }
            salesMap[refund.location].refunded += Number(refund.price);
          });

        const finalData = Object.values(salesMap).map((item) => {
          const netRevenue = item.price - item.refunded;
          const deduction = 0.05 * netRevenue;
          const payout = netRevenue - deduction;

          return {
            id: uuidv4(),
            ...item,
            deduction: deduction.toFixed(2),
            payout: payout.toFixed(2)
          };
        });
        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏à‡∏≤‡∏Å finalData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        const mergedMap = mergedData.reduce((acc, item) => {
          acc[item.location] = item; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location ‡πÄ‡∏õ‡πá‡∏ô key
          return acc;
        }, {});
        
        // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô finalData ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏° ownerInfo ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const matchedData = finalData.map(item => ({
          ...item,
          ownerInfo: mergedMap[item.location]?.ownerInfo || null // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• owner ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        }));

        setcombinedData(matchedData)
        setData(finalData);
        setOwners(ownersRes.data); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å owners ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô state

      } catch (error) {
        console.error("üö® Error fetching data:", error);
        if (error.response && error.response.status === 401) {
          alert("‚ùå Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
          router.push("/login");
        }
      }
    };

    fetchData();
  }, []);
  const [owners, setOwners] = useState([]);

  useEffect(() => {
    const fetchOwners = async () => {
      try {
        const storedToken = localStorage.getItem("token");
        const tokenObject = storedToken ? JSON.parse(storedToken) : null;
        const token = tokenObject?.token || "";

        if (!token) {
          alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
          router.push("/login");
          return;
        }

        const headers = { Authorization: `Bearer ${token}` };
        const ownersRes = await axios.get("http://localhost:5011/api/users", { headers });

        // Filter ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner ‡∏ó‡∏µ‡πà‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô "owner"
        const filteredOwners = ownersRes.data.filter(item => item.role === "owner");
        setOwners(filteredOwners);
      } catch (error) {
        console.error("üö® Error fetching owners data:", error);
      }
    };

    fetchOwners();
  }, []);




  const handleCheckboxChange = (row) => {
    setSelectedRows((prev) => {
      const newSelectedRows = { ...prev };
      if (newSelectedRows[row.id]) {
        delete newSelectedRows[row.id];
      } else {
        newSelectedRows[row.id] = {
          date: row.day,
          location: row.location,
          totalRevenue: row.price,
          refund: row.refunded || 0,
          deduction5Percent: parseFloat(row.deduction),
          payout: parseFloat(row.payout),
        };
      }
      return newSelectedRows;
    });
  };

  const handleSave = async () => {
    const selectedData = Object.values(selectedRows);

    if (selectedData.length === 0) {
      alert("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
      return;
    }

    try {
      const response = await axios.post("http://localhost:5008/api/finance", selectedData);
      if (response.status === 201) {
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
      }
    } catch (error) {
      console.error("üö® Error saving data:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };






  return (
    <>
      <TopBar_Admin textColor="black" />
      <div className="p-6 bg-gray-50 min-h-screen flex flex-col items-center">
        <div className="border border-gray-300 rounded-lg overflow-hidden shadow-md w-full max-w-4xl">
          <table className="table-fixed w-full text-sm">
            <thead className="bg-gray-200 text-gray-700 text-center">
              <tr>
                <th className="p-3">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                <th className="p-3">‡∏ß‡∏±‡∏ô</th>
                <th className="p-3">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</th>
                <th className="p-3">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</th>
                <th className="p-3">‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
                <th className="p-3">‡∏´‡∏±‡∏Å 5%</th>
                <th className="p-3">‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å</th>
                <th className="p-3">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {combinedData ? combinedData.map((row) => (
                <tr key={row.id} className="bg-white">
                  <td className="p-3 text-center">
                    <input
                      type="checkbox"
                      checked={!!selectedRows[row.id]}
                      onChange={() => handleCheckboxChange(row)}
                      className="w-4 h-4"
                    />
                  </td>
                  <td className="p-3">{row.day}</td>
                  <td className="p-3">{row.location}</td>
                  <td className="p-3">{row.price.toFixed(2)} ‡∏ø</td>
                  <td className="p-3">{row.refunded.toFixed(2)} ‡∏ø</td>
                  <td className="p-3">{row.deduction} ‡∏ø</td>
                  <td className="p-3">{row.payout} ‡∏ø</td>
                  <td className="p-3 text-center">
                    <button
                      onClick={() => {
                        setModalData(row)
                        console.log("üîπ data:",data)
                        console.log("üîπ mergedData:", mergedData);
                        console.log("üîπ combinedData:", combinedData)
                      }}
                      className="bg-green-500 text-white px-2 py-1 rounded-lg text-sm hover:bg-green-600"
                    >
                      ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </button>
                  </td>
                </tr>
              )):<>Loading...</>}
            </tbody>
          </table>
        </div>

        <button
          onClick={handleSave}
          className="bg-blue-500 text-white px-3 py-1 rounded-lg text-xl hover:bg-blue-600 mt-5"
        >
          Save
        </button>
      </div>

      {/* ‚úÖ Popup (Modal) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
      {modalData && (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-5 rounded-lg shadow-lg w-96">
            <h2 className="text-lg font-semibold mb-3">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h2>
            <p><strong>‡∏ß‡∏±‡∏ô:</strong> {modalData.day}</p>
            <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> {modalData.location}</p>
            <p><strong>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°:</strong> {modalData.price.toFixed(2)} ‡∏ø</p>
            <p><strong>‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</strong> {modalData.refunded.toFixed(2)} ‡∏ø</p>
            <p><strong>‡∏´‡∏±‡∏Å 5%:</strong> {modalData.deduction} ‡∏ø</p>
            <p><strong>‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å:</strong> {modalData.payout} ‡∏ø</p>
            <p><strong>firstname:</strong> {modalData.ownerInfo.firstName} </p>
            <p><strong>email:</strong> {modalData.ownerInfo.bank} </p>
            <p><strong>accountNumber:</strong> {modalData.ownerInfo.accountNumber}</p>
            <div className="mt-4 text-right">
              <button
                onClick={() => setModalData(null)}
                className="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600"
              >
                ‡∏õ‡∏¥‡∏î
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default FinancialReport;
